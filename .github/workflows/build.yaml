name: build

on:
  push:
  workflow_call:
    inputs:
      skipBuild:
        description: 'Skip build, useful for libraries'
        default: false
        required: false
        type: boolean
      skipCoverage:
        description: 'Skip coverage upload'
        default: false
        required: false
        type: boolean

permissions:
  contents: read

jobs:
  golangci:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          args: -v

      - name: staticcheck
        uses: dominikh/staticcheck-action@v1.3.1
        with:
          version: latest
          install-go: false

  verifications:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: install gotools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install golang.org/x/tools/cmd/stringer@latest

      - name: run typos
        uses: crate-ci/typos@master

      - name: go format
        run: gofmt -s -w . && git diff --exit-code

      - name: go tidy
        run: go mod tidy && git diff --exit-code

      - name: run goimports
        run: |
          goimports -w -local "$(go mod edit -json | jq -r .Module.Path)/" .
          git diff --exit-code

      - name: go mod
        run: go mod download

      - name: go mod verify
        run: go mod verify

      - name: install genwith
        uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: bzimmer/genwith

      - name: go generate
        run: go generate ./... && git diff --exit-code

  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: false

      - name: install task
        uses: arduino/setup-task@v2

      - name: install fd
        run: |
          sudo apt-get update
          sudo apt-get install fd-find jq

          mkdir -p "${HOME}/.local/bin"
          ln -s "$(which fdfind)" "${HOME}/.local/bin/fd"
          echo "${HOME}/.local/bin" >> "$GITHUB_PATH"

      - name: go build
        run: task build
        if: ${{ !inputs.skipBuild }}

      - name: go test
        run: task test

      - name: go benchmark
        run: go test -v -shuffle=on -run=- -bench=. -benchtime=1x ./...

      - name: upload code coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./dist/coverage.txt
          verbose: true
        if: ${{ !inputs.skipCoverage }}
